security:
    # Configuración para hashear contraseñas
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # Proveedor de usuarios basado en la entidad Usuarios y la propiedad nick
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Usuarios
                property: nick  # Se usa el nick en lugar del email

    firewalls:
        # Firewall para el login con nick y contrasenia
        api_login:
            pattern: ^/api/usuarios/login
            stateless: true
            json_login:
                check_path: /api/usuarios/login
                username_path: nick
                password_path: contrasenia
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Firewall para proteger las rutas de la API con JWT
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~

    # Control de acceso a rutas
    access_control:
        - { path: ^/api/usuarios/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/usuarios/registro, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10



#security:
#    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
#    password_hashers:
#        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
#    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
#    providers:
#        #users_in_memory: { memory: null }
#        app_user_provider:
#            entity:
#                class: App\Entity\Usuarios
#                property: nick
#    firewalls:
#        api_login:
##            pattern: ^/api/login (como estaba antes)
##            pattern: ^/usuarios/login
#            pattern: ^/api/usuarios/login
#            stateless: true
#            json_login:
##                check_path: /api/login_check
##                check_path: /usuarios/login
#                check_path: /api/usuarios/login
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#        api:
#            pattern: ^/api
#            stateless: true
#            provider: app_user_provider
#            jwt: ~
#    #Note: Only the *first* access control that matches will be used
#    access_control:
##        - { path: ^/api/login, roles: PUBLIC_ACCESS }
#        - { path: ^/usuarios/login, roles: PUBLIC_ACCESS }
#        - { path: ^/usuarios/registro, roles: PUBLIC_ACCESS }
#        - { path: ^/,       roles: PUBLIC_ACCESS }
#when@test:
#    security:
#        password_hashers:
#            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                algorithm: auto
#                cost: 4
#                time_cost: 3
#                memory_cost: 10
